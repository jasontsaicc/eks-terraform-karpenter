---
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: general-purpose
  namespace: kube-system
spec:
  # Template section that describes how to template out NodeClaim resources that Karpenter will provision
  template:
    metadata:
      labels:
        nodepool: general-purpose
    spec:
      requirements:
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["spot", "on-demand"]
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: node.kubernetes.io/instance-type
          operator: In
          values:
            - t3.small
            - t3.medium
            - t3.large
            - t3a.small
            - t3a.medium
            - t3a.large
            - m5.large
            - m5.xlarge
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default
  # Disruption section which describes the ways in which Karpenter can disrupt and replace Nodes
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 30s
    budgets:
    - nodes: "10%"
  # Limits section that defines a maximum amount of resources that the cluster can autoscale to
  limits:
    cpu: 1000
    memory: 1000Gi
  weight: 10
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: default
  namespace: kube-system
spec:
  amiFamily: AL2
  instanceStorePolicy: RAID0
  amiSelectorTerms:
    - alias: al2@latest
  userData: |
    #!/bin/bash
    /etc/eks/bootstrap.sh eks-lab-test-eks
  role: KarpenterNodeRole-eks-lab-test-eks
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: eks-lab-test-eks
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: eks-lab-test-eks
  associatePublicIPAddress: false